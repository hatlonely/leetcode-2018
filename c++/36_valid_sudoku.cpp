#include <gtest/gtest.h>
#include <bitset>
#include <vector>

class Solution {
   public:
    bool isValidSudoku(const std::vector<std::vector<char>>& sudoku) {
        for (int i = 0; i < 9; i++) {
            std::bitset<9> bsRow;
            std::bitset<9> bsCol;
            std::bitset<9> bsBlk;
            int            x = i % 3 * 3;
            int            y = i / 3 * 3;
            for (int j = 0; j < 9; j++) {
                if (sudoku[i][j] != '.') {
                    if (bsRow.test(sudoku[i][j] - '1')) {
                        return false;
                    }
                    bsRow.set(sudoku[i][j] - '1');
                }
                if (sudoku[j][i] != '.') {
                    if (bsCol.test(sudoku[j][i] - '1')) {
                        return false;
                    }
                    bsCol.set(sudoku[j][i] - '1');
                }
                if (sudoku[x + j / 3][y + j % 3] != '.') {
                    if (bsBlk.test(sudoku[x + j / 3][y + j % 3] - '1')) {
                        return false;
                    }
                    bsBlk.set(sudoku[x + j / 3][y + j % 3] - '1');
                }
            }
        }
        return true;
    }
};

int main(int argc, char* argv[]) {
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}

TEST(test, case1) {
    Solution solution;
    EXPECT_TRUE(solution.isValidSudoku(
        {{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
         {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
         {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
         {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
         {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
         {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
         {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
         {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
         {'.', '.', '.', '.', '8', '.', '.', '7', '9'}}));

    EXPECT_FALSE(solution.isValidSudoku(
        {{'8', '3', '.', '.', '7', '.', '.', '.', '.'},
         {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
         {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
         {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
         {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
         {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
         {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
         {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
         {'.', '.', '.', '.', '8', '.', '.', '7', '9'}}));
    EXPECT_FALSE(solution.isValidSudoku(
        {{'.', '.', '4', '.', '.', '.', '6', '3', '.'},
         {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
         {'5', '.', '.', '.', '.', '.', '.', '9', '.'},
         {'.', '.', '.', '5', '6', '.', '.', '.', '.'},
         {'4', '.', '3', '.', '.', '.', '.', '.', '1'},
         {'.', '.', '.', '7', '.', '.', '.', '.', '.'},
         {'.', '.', '.', '5', '.', '.', '.', '.', '.'},
         {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
         {'.', '.', '.', '.', '.', '.', '.', '.', '.'}}));
}